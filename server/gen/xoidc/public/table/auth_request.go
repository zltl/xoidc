//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AuthRequest = newAuthRequestTable("public", "auth_request", "")

type authRequestTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	CreationDate postgres.ColumnTimestampz
	Done         postgres.ColumnBool
	AuthTime     postgres.ColumnTimestampz
	Content      postgres.ColumnString
	NamespaceID  postgres.ColumnString
	UserID       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AuthRequestTable struct {
	authRequestTable

	EXCLUDED authRequestTable
}

// AS creates new AuthRequestTable with assigned alias
func (a AuthRequestTable) AS(alias string) *AuthRequestTable {
	return newAuthRequestTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuthRequestTable with assigned schema name
func (a AuthRequestTable) FromSchema(schemaName string) *AuthRequestTable {
	return newAuthRequestTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuthRequestTable with assigned table prefix
func (a AuthRequestTable) WithPrefix(prefix string) *AuthRequestTable {
	return newAuthRequestTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuthRequestTable with assigned table suffix
func (a AuthRequestTable) WithSuffix(suffix string) *AuthRequestTable {
	return newAuthRequestTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuthRequestTable(schemaName, tableName, alias string) *AuthRequestTable {
	return &AuthRequestTable{
		authRequestTable: newAuthRequestTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newAuthRequestTableImpl("", "excluded", ""),
	}
}

func newAuthRequestTableImpl(schemaName, tableName, alias string) authRequestTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		CreationDateColumn = postgres.TimestampzColumn("creation_date")
		DoneColumn         = postgres.BoolColumn("done")
		AuthTimeColumn     = postgres.TimestampzColumn("auth_time")
		ContentColumn      = postgres.StringColumn("content")
		NamespaceIDColumn  = postgres.StringColumn("namespace_id")
		UserIDColumn       = postgres.StringColumn("user_id")
		allColumns         = postgres.ColumnList{IDColumn, CreationDateColumn, DoneColumn, AuthTimeColumn, ContentColumn, NamespaceIDColumn, UserIDColumn}
		mutableColumns     = postgres.ColumnList{CreationDateColumn, DoneColumn, AuthTimeColumn, ContentColumn, NamespaceIDColumn, UserIDColumn}
	)

	return authRequestTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		CreationDate: CreationDateColumn,
		Done:         DoneColumn,
		AuthTime:     AuthTimeColumn,
		Content:      ContentColumn,
		NamespaceID:  NamespaceIDColumn,
		UserID:       UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
