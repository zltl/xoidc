//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var RefreshToken = newRefreshTokenTable("public", "refresh_token", "")

type refreshTokenTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnString
	Token         postgres.ColumnString
	AuthTime      postgres.ColumnTimestamp
	Amr           postgres.ColumnString
	Audience      postgres.ColumnString
	UserID        postgres.ColumnString
	ApplicationID postgres.ColumnString
	Expiration    postgres.ColumnTimestamp
	Scopes        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RefreshTokenTable struct {
	refreshTokenTable

	EXCLUDED refreshTokenTable
}

// AS creates new RefreshTokenTable with assigned alias
func (a RefreshTokenTable) AS(alias string) *RefreshTokenTable {
	return newRefreshTokenTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RefreshTokenTable with assigned schema name
func (a RefreshTokenTable) FromSchema(schemaName string) *RefreshTokenTable {
	return newRefreshTokenTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RefreshTokenTable with assigned table prefix
func (a RefreshTokenTable) WithPrefix(prefix string) *RefreshTokenTable {
	return newRefreshTokenTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RefreshTokenTable with assigned table suffix
func (a RefreshTokenTable) WithSuffix(suffix string) *RefreshTokenTable {
	return newRefreshTokenTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRefreshTokenTable(schemaName, tableName, alias string) *RefreshTokenTable {
	return &RefreshTokenTable{
		refreshTokenTable: newRefreshTokenTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newRefreshTokenTableImpl("", "excluded", ""),
	}
}

func newRefreshTokenTableImpl(schemaName, tableName, alias string) refreshTokenTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		TokenColumn         = postgres.StringColumn("token")
		AuthTimeColumn      = postgres.TimestampColumn("auth_time")
		AmrColumn           = postgres.StringColumn("amr")
		AudienceColumn      = postgres.StringColumn("audience")
		UserIDColumn        = postgres.StringColumn("user_id")
		ApplicationIDColumn = postgres.StringColumn("application_id")
		ExpirationColumn    = postgres.TimestampColumn("expiration")
		ScopesColumn        = postgres.StringColumn("scopes")
		allColumns          = postgres.ColumnList{IDColumn, TokenColumn, AuthTimeColumn, AmrColumn, AudienceColumn, UserIDColumn, ApplicationIDColumn, ExpirationColumn, ScopesColumn}
		mutableColumns      = postgres.ColumnList{TokenColumn, AuthTimeColumn, AmrColumn, AudienceColumn, UserIDColumn, ApplicationIDColumn, ExpirationColumn, ScopesColumn}
	)

	return refreshTokenTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Token:         TokenColumn,
		AuthTime:      AuthTimeColumn,
		Amr:           AmrColumn,
		Audience:      AudienceColumn,
		UserID:        UserIDColumn,
		ApplicationID: ApplicationIDColumn,
		Expiration:    ExpirationColumn,
		Scopes:        ScopesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
