//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Client = newClientTable("public", "client", "")

type clientTable struct {
	postgres.Table

	// Columns
	ID                             postgres.ColumnString
	Secret                         postgres.ColumnString
	RedirectUris                   postgres.ColumnString
	ApplicationType                postgres.ColumnInteger
	AuthMethod                     postgres.ColumnString
	ResponseTypes                  postgres.ColumnString
	AccessTokenType                postgres.ColumnInteger
	DevMode                        postgres.ColumnBool
	IDTokenUserInfoClaimsAssertion postgres.ColumnBool
	ClockSkew                      postgres.ColumnInterval
	PostLogoutRedirectURIGlobs     postgres.ColumnString
	RedirectURIGlobs               postgres.ColumnString
	UserNamespaceID                postgres.ColumnString
	GrantTypes                     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ClientTable struct {
	clientTable

	EXCLUDED clientTable
}

// AS creates new ClientTable with assigned alias
func (a ClientTable) AS(alias string) *ClientTable {
	return newClientTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ClientTable with assigned schema name
func (a ClientTable) FromSchema(schemaName string) *ClientTable {
	return newClientTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ClientTable with assigned table prefix
func (a ClientTable) WithPrefix(prefix string) *ClientTable {
	return newClientTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ClientTable with assigned table suffix
func (a ClientTable) WithSuffix(suffix string) *ClientTable {
	return newClientTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newClientTable(schemaName, tableName, alias string) *ClientTable {
	return &ClientTable{
		clientTable: newClientTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newClientTableImpl("", "excluded", ""),
	}
}

func newClientTableImpl(schemaName, tableName, alias string) clientTable {
	var (
		IDColumn                             = postgres.StringColumn("id")
		SecretColumn                         = postgres.StringColumn("secret")
		RedirectUrisColumn                   = postgres.StringColumn("redirect_uris")
		ApplicationTypeColumn                = postgres.IntegerColumn("application_type")
		AuthMethodColumn                     = postgres.StringColumn("auth_method")
		ResponseTypesColumn                  = postgres.StringColumn("response_types")
		AccessTokenTypeColumn                = postgres.IntegerColumn("access_token_type")
		DevModeColumn                        = postgres.BoolColumn("dev_mode")
		IDTokenUserInfoClaimsAssertionColumn = postgres.BoolColumn("id_token_user_info_claims_assertion")
		ClockSkewColumn                      = postgres.IntervalColumn("clock_skew")
		PostLogoutRedirectURIGlobsColumn     = postgres.StringColumn("post_logout_redirect_uri_globs")
		RedirectURIGlobsColumn               = postgres.StringColumn("redirect_uri_globs")
		UserNamespaceIDColumn                = postgres.StringColumn("user_namespace_id")
		GrantTypesColumn                     = postgres.StringColumn("grant_types")
		allColumns                           = postgres.ColumnList{IDColumn, SecretColumn, RedirectUrisColumn, ApplicationTypeColumn, AuthMethodColumn, ResponseTypesColumn, AccessTokenTypeColumn, DevModeColumn, IDTokenUserInfoClaimsAssertionColumn, ClockSkewColumn, PostLogoutRedirectURIGlobsColumn, RedirectURIGlobsColumn, UserNamespaceIDColumn, GrantTypesColumn}
		mutableColumns                       = postgres.ColumnList{IDColumn, SecretColumn, RedirectUrisColumn, ApplicationTypeColumn, AuthMethodColumn, ResponseTypesColumn, AccessTokenTypeColumn, DevModeColumn, ClockSkewColumn, PostLogoutRedirectURIGlobsColumn, RedirectURIGlobsColumn, UserNamespaceIDColumn, GrantTypesColumn}
	)

	return clientTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                             IDColumn,
		Secret:                         SecretColumn,
		RedirectUris:                   RedirectUrisColumn,
		ApplicationType:                ApplicationTypeColumn,
		AuthMethod:                     AuthMethodColumn,
		ResponseTypes:                  ResponseTypesColumn,
		AccessTokenType:                AccessTokenTypeColumn,
		DevMode:                        DevModeColumn,
		IDTokenUserInfoClaimsAssertion: IDTokenUserInfoClaimsAssertionColumn,
		ClockSkew:                      ClockSkewColumn,
		PostLogoutRedirectURIGlobs:     PostLogoutRedirectURIGlobsColumn,
		RedirectURIGlobs:               RedirectURIGlobsColumn,
		UserNamespaceID:                UserNamespaceIDColumn,
		GrantTypes:                     GrantTypesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
