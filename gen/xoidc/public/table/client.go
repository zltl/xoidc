//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Client = newClientTable("public", "client", "")

type clientTable struct {
	postgres.Table

	// Columns
	ID                             postgres.ColumnInteger
	Secret                         postgres.ColumnString
	ApplicationType                postgres.ColumnInteger
	AuthMethod                     postgres.ColumnString
	AccessTokenType                postgres.ColumnInteger
	DevMode                        postgres.ColumnBool
	IDTokenUserinfoClaimsAssertion postgres.ColumnBool
	ClockSkew                      postgres.ColumnTimestampz
	CreatedAt                      postgres.ColumnTimestampz
	UpdatedAt                      postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ClientTable struct {
	clientTable

	EXCLUDED clientTable
}

// AS creates new ClientTable with assigned alias
func (a ClientTable) AS(alias string) *ClientTable {
	return newClientTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ClientTable with assigned schema name
func (a ClientTable) FromSchema(schemaName string) *ClientTable {
	return newClientTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ClientTable with assigned table prefix
func (a ClientTable) WithPrefix(prefix string) *ClientTable {
	return newClientTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ClientTable with assigned table suffix
func (a ClientTable) WithSuffix(suffix string) *ClientTable {
	return newClientTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newClientTable(schemaName, tableName, alias string) *ClientTable {
	return &ClientTable{
		clientTable: newClientTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newClientTableImpl("", "excluded", ""),
	}
}

func newClientTableImpl(schemaName, tableName, alias string) clientTable {
	var (
		IDColumn                             = postgres.IntegerColumn("id")
		SecretColumn                         = postgres.StringColumn("secret")
		ApplicationTypeColumn                = postgres.IntegerColumn("application_type")
		AuthMethodColumn                     = postgres.StringColumn("auth_method")
		AccessTokenTypeColumn                = postgres.IntegerColumn("access_token_type")
		DevModeColumn                        = postgres.BoolColumn("dev_mode")
		IDTokenUserinfoClaimsAssertionColumn = postgres.BoolColumn("id_token_userinfo_claims_assertion")
		ClockSkewColumn                      = postgres.TimestampzColumn("clock_skew")
		CreatedAtColumn                      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn                      = postgres.TimestampzColumn("updated_at")
		allColumns                           = postgres.ColumnList{IDColumn, SecretColumn, ApplicationTypeColumn, AuthMethodColumn, AccessTokenTypeColumn, DevModeColumn, IDTokenUserinfoClaimsAssertionColumn, ClockSkewColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns                       = postgres.ColumnList{IDColumn, SecretColumn, ApplicationTypeColumn, AuthMethodColumn, AccessTokenTypeColumn, DevModeColumn, ClockSkewColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return clientTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                             IDColumn,
		Secret:                         SecretColumn,
		ApplicationType:                ApplicationTypeColumn,
		AuthMethod:                     AuthMethodColumn,
		AccessTokenType:                AccessTokenTypeColumn,
		DevMode:                        DevModeColumn,
		IDTokenUserinfoClaimsAssertion: IDTokenUserinfoClaimsAssertionColumn,
		ClockSkew:                      ClockSkewColumn,
		CreatedAt:                      CreatedAtColumn,
		UpdatedAt:                      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
