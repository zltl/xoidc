//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var User = newUserTable("public", "user", "")

type userTable struct {
	postgres.Table

	// Columns
	ID                  postgres.ColumnInteger
	Username            postgres.ColumnString
	Password            postgres.ColumnString
	Nickname            postgres.ColumnString
	GivenName           postgres.ColumnString
	FamilyName          postgres.ColumnString
	MiddleName          postgres.ColumnString
	PreferredUsername   postgres.ColumnString
	Profile             postgres.ColumnString
	Picture             postgres.ColumnString
	Website             postgres.ColumnString
	Email               postgres.ColumnString
	EmailVerified       postgres.ColumnBool
	Gender              postgres.ColumnString
	Birthdate           postgres.ColumnDate
	Zoneinfo            postgres.ColumnString
	Locale              postgres.ColumnString
	PhoneNumber         postgres.ColumnString
	PhoneNumberVerified postgres.ColumnBool
	Address             postgres.ColumnString
	UpdatedAt           postgres.ColumnTimestampz
	Namespace           postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserTable struct {
	userTable

	EXCLUDED userTable
}

// AS creates new UserTable with assigned alias
func (a UserTable) AS(alias string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTable with assigned schema name
func (a UserTable) FromSchema(schemaName string) *UserTable {
	return newUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTable with assigned table prefix
func (a UserTable) WithPrefix(prefix string) *UserTable {
	return newUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTable with assigned table suffix
func (a UserTable) WithSuffix(suffix string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTable(schemaName, tableName, alias string) *UserTable {
	return &UserTable{
		userTable: newUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newUserTableImpl("", "excluded", ""),
	}
}

func newUserTableImpl(schemaName, tableName, alias string) userTable {
	var (
		IDColumn                  = postgres.IntegerColumn("id")
		UsernameColumn            = postgres.StringColumn("username")
		PasswordColumn            = postgres.StringColumn("password")
		NicknameColumn            = postgres.StringColumn("nickname")
		GivenNameColumn           = postgres.StringColumn("given_name")
		FamilyNameColumn          = postgres.StringColumn("family_name")
		MiddleNameColumn          = postgres.StringColumn("middle_name")
		PreferredUsernameColumn   = postgres.StringColumn("preferred_username")
		ProfileColumn             = postgres.StringColumn("profile")
		PictureColumn             = postgres.StringColumn("picture")
		WebsiteColumn             = postgres.StringColumn("website")
		EmailColumn               = postgres.StringColumn("email")
		EmailVerifiedColumn       = postgres.BoolColumn("email_verified")
		GenderColumn              = postgres.StringColumn("gender")
		BirthdateColumn           = postgres.DateColumn("birthdate")
		ZoneinfoColumn            = postgres.StringColumn("zoneinfo")
		LocaleColumn              = postgres.StringColumn("locale")
		PhoneNumberColumn         = postgres.StringColumn("phone_number")
		PhoneNumberVerifiedColumn = postgres.BoolColumn("phone_number_verified")
		AddressColumn             = postgres.StringColumn("address")
		UpdatedAtColumn           = postgres.TimestampzColumn("updated_at")
		NamespaceColumn           = postgres.IntegerColumn("namespace")
		allColumns                = postgres.ColumnList{IDColumn, UsernameColumn, PasswordColumn, NicknameColumn, GivenNameColumn, FamilyNameColumn, MiddleNameColumn, PreferredUsernameColumn, ProfileColumn, PictureColumn, WebsiteColumn, EmailColumn, EmailVerifiedColumn, GenderColumn, BirthdateColumn, ZoneinfoColumn, LocaleColumn, PhoneNumberColumn, PhoneNumberVerifiedColumn, AddressColumn, UpdatedAtColumn, NamespaceColumn}
		mutableColumns            = postgres.ColumnList{UsernameColumn, PasswordColumn, NicknameColumn, GivenNameColumn, FamilyNameColumn, MiddleNameColumn, PreferredUsernameColumn, ProfileColumn, PictureColumn, WebsiteColumn, EmailColumn, EmailVerifiedColumn, GenderColumn, BirthdateColumn, ZoneinfoColumn, LocaleColumn, PhoneNumberColumn, PhoneNumberVerifiedColumn, AddressColumn, UpdatedAtColumn, NamespaceColumn}
	)

	return userTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		Username:            UsernameColumn,
		Password:            PasswordColumn,
		Nickname:            NicknameColumn,
		GivenName:           GivenNameColumn,
		FamilyName:          FamilyNameColumn,
		MiddleName:          MiddleNameColumn,
		PreferredUsername:   PreferredUsernameColumn,
		Profile:             ProfileColumn,
		Picture:             PictureColumn,
		Website:             WebsiteColumn,
		Email:               EmailColumn,
		EmailVerified:       EmailVerifiedColumn,
		Gender:              GenderColumn,
		Birthdate:           BirthdateColumn,
		Zoneinfo:            ZoneinfoColumn,
		Locale:              LocaleColumn,
		PhoneNumber:         PhoneNumberColumn,
		PhoneNumberVerified: PhoneNumberVerifiedColumn,
		Address:             AddressColumn,
		UpdatedAt:           UpdatedAtColumn,
		Namespace:           NamespaceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
