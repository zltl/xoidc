//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ClientResponseTypes = newClientResponseTypesTable("public", "client_response_types", "")

type clientResponseTypesTable struct {
	postgres.Table

	// Columns
	ClientID     postgres.ColumnInteger
	ResponseType postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ClientResponseTypesTable struct {
	clientResponseTypesTable

	EXCLUDED clientResponseTypesTable
}

// AS creates new ClientResponseTypesTable with assigned alias
func (a ClientResponseTypesTable) AS(alias string) *ClientResponseTypesTable {
	return newClientResponseTypesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ClientResponseTypesTable with assigned schema name
func (a ClientResponseTypesTable) FromSchema(schemaName string) *ClientResponseTypesTable {
	return newClientResponseTypesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ClientResponseTypesTable with assigned table prefix
func (a ClientResponseTypesTable) WithPrefix(prefix string) *ClientResponseTypesTable {
	return newClientResponseTypesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ClientResponseTypesTable with assigned table suffix
func (a ClientResponseTypesTable) WithSuffix(suffix string) *ClientResponseTypesTable {
	return newClientResponseTypesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newClientResponseTypesTable(schemaName, tableName, alias string) *ClientResponseTypesTable {
	return &ClientResponseTypesTable{
		clientResponseTypesTable: newClientResponseTypesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newClientResponseTypesTableImpl("", "excluded", ""),
	}
}

func newClientResponseTypesTableImpl(schemaName, tableName, alias string) clientResponseTypesTable {
	var (
		ClientIDColumn     = postgres.IntegerColumn("client_id")
		ResponseTypeColumn = postgres.StringColumn("response_type")
		allColumns         = postgres.ColumnList{ClientIDColumn, ResponseTypeColumn}
		mutableColumns     = postgres.ColumnList{}
	)

	return clientResponseTypesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ClientID:     ClientIDColumn,
		ResponseType: ResponseTypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
