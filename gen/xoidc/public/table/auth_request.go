//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AuthRequest = newAuthRequestTable("public", "auth_request", "")

type authRequestTable struct {
	postgres.Table

	// Columns
	ID                      postgres.ColumnString
	CreationDate            postgres.ColumnTimestampz
	ApplicationID           postgres.ColumnString
	CallbackURI             postgres.ColumnString
	TransferState           postgres.ColumnString
	Prompt                  postgres.ColumnString
	UILocales               postgres.ColumnString
	LoginHint               postgres.ColumnString
	MaxAuthAge              postgres.ColumnString
	UserID                  postgres.ColumnInteger
	Scopes                  postgres.ColumnString
	ResponseType            postgres.ColumnString
	Nonce                   postgres.ColumnString
	OidcCodeChallange       postgres.ColumnString
	OidcCodeChallangeMethod postgres.ColumnString
	Done                    postgres.ColumnBool
	AuthTime                postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AuthRequestTable struct {
	authRequestTable

	EXCLUDED authRequestTable
}

// AS creates new AuthRequestTable with assigned alias
func (a AuthRequestTable) AS(alias string) *AuthRequestTable {
	return newAuthRequestTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuthRequestTable with assigned schema name
func (a AuthRequestTable) FromSchema(schemaName string) *AuthRequestTable {
	return newAuthRequestTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuthRequestTable with assigned table prefix
func (a AuthRequestTable) WithPrefix(prefix string) *AuthRequestTable {
	return newAuthRequestTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuthRequestTable with assigned table suffix
func (a AuthRequestTable) WithSuffix(suffix string) *AuthRequestTable {
	return newAuthRequestTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuthRequestTable(schemaName, tableName, alias string) *AuthRequestTable {
	return &AuthRequestTable{
		authRequestTable: newAuthRequestTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newAuthRequestTableImpl("", "excluded", ""),
	}
}

func newAuthRequestTableImpl(schemaName, tableName, alias string) authRequestTable {
	var (
		IDColumn                      = postgres.StringColumn("id")
		CreationDateColumn            = postgres.TimestampzColumn("creation_date")
		ApplicationIDColumn           = postgres.StringColumn("application_id")
		CallbackURIColumn             = postgres.StringColumn("callback_uri")
		TransferStateColumn           = postgres.StringColumn("transfer_state")
		PromptColumn                  = postgres.StringColumn("prompt")
		UILocalesColumn               = postgres.StringColumn("ui_locales")
		LoginHintColumn               = postgres.StringColumn("login_hint")
		MaxAuthAgeColumn              = postgres.StringColumn("max_auth_age")
		UserIDColumn                  = postgres.IntegerColumn("user_id")
		ScopesColumn                  = postgres.StringColumn("scopes")
		ResponseTypeColumn            = postgres.StringColumn("response_type")
		NonceColumn                   = postgres.StringColumn("nonce")
		OidcCodeChallangeColumn       = postgres.StringColumn("oidc_code_challange")
		OidcCodeChallangeMethodColumn = postgres.StringColumn("oidc_code_challange_method")
		DoneColumn                    = postgres.BoolColumn("done")
		AuthTimeColumn                = postgres.TimestampzColumn("auth_time")
		allColumns                    = postgres.ColumnList{IDColumn, CreationDateColumn, ApplicationIDColumn, CallbackURIColumn, TransferStateColumn, PromptColumn, UILocalesColumn, LoginHintColumn, MaxAuthAgeColumn, UserIDColumn, ScopesColumn, ResponseTypeColumn, NonceColumn, OidcCodeChallangeColumn, OidcCodeChallangeMethodColumn, DoneColumn, AuthTimeColumn}
		mutableColumns                = postgres.ColumnList{CreationDateColumn, ApplicationIDColumn, CallbackURIColumn, TransferStateColumn, PromptColumn, UILocalesColumn, LoginHintColumn, MaxAuthAgeColumn, UserIDColumn, ScopesColumn, ResponseTypeColumn, NonceColumn, OidcCodeChallangeColumn, OidcCodeChallangeMethodColumn, DoneColumn, AuthTimeColumn}
	)

	return authRequestTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                      IDColumn,
		CreationDate:            CreationDateColumn,
		ApplicationID:           ApplicationIDColumn,
		CallbackURI:             CallbackURIColumn,
		TransferState:           TransferStateColumn,
		Prompt:                  PromptColumn,
		UILocales:               UILocalesColumn,
		LoginHint:               LoginHintColumn,
		MaxAuthAge:              MaxAuthAgeColumn,
		UserID:                  UserIDColumn,
		Scopes:                  ScopesColumn,
		ResponseType:            ResponseTypeColumn,
		Nonce:                   NonceColumn,
		OidcCodeChallange:       OidcCodeChallangeColumn,
		OidcCodeChallangeMethod: OidcCodeChallangeMethodColumn,
		Done:                    DoneColumn,
		AuthTime:                AuthTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
