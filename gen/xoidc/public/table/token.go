//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Token = newTokenTable("public", "token", "")

type tokenTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	ApplicationID  postgres.ColumnString
	Subject        postgres.ColumnString
	RefreshTokenID postgres.ColumnString
	Audience       postgres.ColumnString
	Expiration     postgres.ColumnTimestamp
	Scopes         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TokenTable struct {
	tokenTable

	EXCLUDED tokenTable
}

// AS creates new TokenTable with assigned alias
func (a TokenTable) AS(alias string) *TokenTable {
	return newTokenTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TokenTable with assigned schema name
func (a TokenTable) FromSchema(schemaName string) *TokenTable {
	return newTokenTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TokenTable with assigned table prefix
func (a TokenTable) WithPrefix(prefix string) *TokenTable {
	return newTokenTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TokenTable with assigned table suffix
func (a TokenTable) WithSuffix(suffix string) *TokenTable {
	return newTokenTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTokenTable(schemaName, tableName, alias string) *TokenTable {
	return &TokenTable{
		tokenTable: newTokenTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newTokenTableImpl("", "excluded", ""),
	}
}

func newTokenTableImpl(schemaName, tableName, alias string) tokenTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		ApplicationIDColumn  = postgres.StringColumn("application_id")
		SubjectColumn        = postgres.StringColumn("subject")
		RefreshTokenIDColumn = postgres.StringColumn("refresh_token_id")
		AudienceColumn       = postgres.StringColumn("audience")
		ExpirationColumn     = postgres.TimestampColumn("expiration")
		ScopesColumn         = postgres.StringColumn("scopes")
		allColumns           = postgres.ColumnList{IDColumn, ApplicationIDColumn, SubjectColumn, RefreshTokenIDColumn, AudienceColumn, ExpirationColumn, ScopesColumn}
		mutableColumns       = postgres.ColumnList{ApplicationIDColumn, SubjectColumn, RefreshTokenIDColumn, AudienceColumn, ExpirationColumn, ScopesColumn}
	)

	return tokenTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		ApplicationID:  ApplicationIDColumn,
		Subject:        SubjectColumn,
		RefreshTokenID: RefreshTokenIDColumn,
		Audience:       AudienceColumn,
		Expiration:     ExpirationColumn,
		Scopes:         ScopesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
