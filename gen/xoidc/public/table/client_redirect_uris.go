//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ClientRedirectUris = newClientRedirectUrisTable("public", "client_redirect_uris", "")

type clientRedirectUrisTable struct {
	postgres.Table

	// Columns
	ClientID    postgres.ColumnInteger
	RedirectURI postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ClientRedirectUrisTable struct {
	clientRedirectUrisTable

	EXCLUDED clientRedirectUrisTable
}

// AS creates new ClientRedirectUrisTable with assigned alias
func (a ClientRedirectUrisTable) AS(alias string) *ClientRedirectUrisTable {
	return newClientRedirectUrisTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ClientRedirectUrisTable with assigned schema name
func (a ClientRedirectUrisTable) FromSchema(schemaName string) *ClientRedirectUrisTable {
	return newClientRedirectUrisTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ClientRedirectUrisTable with assigned table prefix
func (a ClientRedirectUrisTable) WithPrefix(prefix string) *ClientRedirectUrisTable {
	return newClientRedirectUrisTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ClientRedirectUrisTable with assigned table suffix
func (a ClientRedirectUrisTable) WithSuffix(suffix string) *ClientRedirectUrisTable {
	return newClientRedirectUrisTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newClientRedirectUrisTable(schemaName, tableName, alias string) *ClientRedirectUrisTable {
	return &ClientRedirectUrisTable{
		clientRedirectUrisTable: newClientRedirectUrisTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newClientRedirectUrisTableImpl("", "excluded", ""),
	}
}

func newClientRedirectUrisTableImpl(schemaName, tableName, alias string) clientRedirectUrisTable {
	var (
		ClientIDColumn    = postgres.IntegerColumn("client_id")
		RedirectURIColumn = postgres.StringColumn("redirect_uri")
		allColumns        = postgres.ColumnList{ClientIDColumn, RedirectURIColumn}
		mutableColumns    = postgres.ColumnList{}
	)

	return clientRedirectUrisTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ClientID:    ClientIDColumn,
		RedirectURI: RedirectURIColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
